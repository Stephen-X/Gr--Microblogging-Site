"""
Django settings for grumblr_site project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import dj_database_url
from decouple import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ddrij4#s%rj+*%ncdtaqfu9d+3*(2d2p_h2kc5p5!i_51dim52'
# SECRET_KEY = config('SECRET_KEY')  # set your secret key in environment variable instead

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# set up allowed hosts if debug mode is turned off
# ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '***.herokuapp.com']


# Security related header settings

# prevent browser from MIME-sniffing a response away from the declared content-type
SECURE_CONTENT_TYPE_NOSNIFF = True
# activate the browser's XSS filtering and help prevent XSS attacks
SECURE_BROWSER_XSS_FILTER = True
# block the resource from loading in a frame no matter which site made the request
X_FRAME_OPTIONS = 'DENY'

# Note that you may not enable HTTPS redirect if you choose to use Django Channels and
# also deployed to Heroku with free Heroku Redis hobby-dev plan. SSL for Heroku Redis is
# only available on paid production tier plans, therefore enabling SECURE_SSL_REDIRECT
# will cause the site to be stuck into an infinite redirect loop.

# redirect all connections to HTTPS
# SECURE_SSL_REDIRECT = True
# ensure that the cookie is only sent under an HTTPS connection
# SESSION_COOKIE_SECURE = True
# ensure that the cookie is only sent with an HTTPS connection
# CSRF_COOKIE_SECURE = True
# sets the HSTS header
# SECURE_HSTS_SECONDS = 3600
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # used its naturaltime filter in template of the profile app
    'global_resources',  # app for all the project shared resources (forms, models, etc.) and backend APIs
    'grumblr_auth',  # app for user login / logout / password reset ...
    'grumblr_register',  # app for user registration
    'grumblr_stream',  # app for the global / following page
    'grumblr_profile',  # app for the user profile page
    'channels',
    # 'storages'  # needs its storage adapters to save to cloud storage services, e.g. AWS S3
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # WhiteNoise is used to serve static files locally in production mode;
    # check its documentation for setup details
    # 'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'grumblr_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # include the global templates directory
            os.path.join(BASE_DIR, "global_resources/templates")
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                # a context processor that allows serving media files (user uploaded files) to template
                # through URL, i.e. {{ MEDIA_URL }}
                # TODO: this context processor doesn't work at all in Django 1.11; add this line to the end of
                # urls.py instead: urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT),
                # with imports: django.conf.settings and django.conf.urls.static.static()
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI is the Python standard for web servers and applications;
# it's Django's primary deployment platform
# note: this is not used after Django Channels is enabled, as ASGI servers are used instead
WSGI_APPLICATION = 'grumblr_site.wsgi.application'


# define a default channel layer for Django Channels; Channel layer is the transport mechanism
# that Channels uses to pass messages from producers to consumers
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'asgi_redis.RedisChannelLayer',
        'CONFIG': {
            # either use the url from the `REDIS_URL` environmental variable,
            # or use the localhost address if `REDIS_URL` is None
            'hosts': [os.environ.get('REDIS_URL', 'localhost:6379')]
        },
        # similar to URL routing that maps URLs to view functions, channel routing
        # maps channels to consumer functions; as indicated below, the routing logic
        # is inside `routing.py`
        'ROUTING': 'grumblr_site.routing.channel_routing'
    }
}


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
    # save cloud storage URL to environment variable
    # just supply a PostgreSQL remote URI to an environment variable
    # 'DATABASE_URL', and comment out the above 'default' code
    # 'default': dj_database_url.config(
    #     default=config('DATABASE_URL')
    # )
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

# https://docs.djangoproject.com/en/1.11/ref/settings/#time-zone
TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
STATIC_URL = '/static/'
# in production mode, the static resources need to be reorganized before they can be deployed
# run python manage.py collectstatic to move static resources to new location
STATIC_ROOT = os.path.join(BASE_DIR, 'global_resources/staticfiles')
# also the global static files directory
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'global_resources/static')
]
# compression and caching support from WhiteNoise
# must configure wsgi.py first
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# URL that handles the media served from MEDIA_ROOT, used for managing stored files
MEDIA_URL = '/media/'
# absolute filesystem path to the directory that will hold user-uploaded files
MEDIA_ROOT = os.path.join(BASE_DIR, 'global_resources/media')


# AWS related settings
# AWS_STORAGE_BUCKET_NAME = config('S3_BUCKET')
# AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
# AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
# DEFAULT_FILE_STORAGE = 'grumblr_site.custom_storages.MediaStorage'
# ref for the two lines below: https://github.com/jschneier/django-storages/issues/28#issuecomment-265876674
# AWS_S3_REGION_NAME = 'us-east-2'
# AWS_S3_SIGNATURE_VERSION = 's3v4'
# enable the line below if you'd like to collect your static files
# to S3 as well
# STATICFILES_STORAGE = 'grumblr_site.custom_storages.StaticFilesStorage'


# URL to use if the authentication system requires a user to log in
LOGIN_URL = '/auth/login/'
# default URL to redirect to after a user logs in
LOGIN_REDIRECT_URL = '/'

# configure Django to just print emails rather than sending them
# comment out this line to enable real email-sending
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# to enable real email-sending, uncomment and configure the settings below
# for more: https://docs.djangoproject.com/en/1.11/topics/email/#smtp-backend
# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_HOST_USER = config('ADMIN_EMAIL')
# EMAIL_HOST_PASSWORD = config('ADMIN_EMAIL_PASS')
# EMAIL_PORT = 587
